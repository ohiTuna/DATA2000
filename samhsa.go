package main

import (

	"fmt"
	"log"
	"github.com/PuerkitoBio/goquery"
)


func main() {
	doc, err := goquery.NewDocument("http://www.samhsa.gov/medication-assisted-treatment/physician-program-data/certified-physicians?field_bup_us_state_code_value=All&page=1")
	if err != nil {
		log.Fatal(err)
	}
	linkmk()
	
	// Find the review items
	doc.Find("views-field views-field-field-bup-year-certified .field-content").Each(func(i int, s *goquery.Selection) {
		// For each item found, get the year
		fmt.Println(i)
		state := s.Find("State:").Text()
		docnum := s.Find("i").()
		fmt.Printf("State %d: %v\n", state, i)
		fmt.Println(state)
	})

func linkmk() {


	//creates URLS and writes different URLs as slices to 'urls'
	for i := 0; i <= inRuns; i++ {
		fmt.Println("making URL slices")
	urlss := fmt.Sprintf("https://www.samhsa.gov/medication-assisted-treatment/physician-program-data/certified-physicians?field_bup_us_state_code_value=All&page=1
		lurl := fmt.Sprintf("https://www.samhsa.gov/medication-assisted-treatment/physician-program-data/certified-physicians?field_bup_us_state_code_value=All&page=%s", 
			inPage)
			
		urls = append(urls, lurl)

	}

	fmt.Println(urls[0])
	//carries out execution of decoder and reader/writer
	dataset := make([]Stat, 0, len(urls)*1)
	fmt.Println("dataset made okay")
	for _, lurl := range urls {
		Currentdat := reader(inRuns, lurl)
		dataset = append(dataset, Currentdat.Data...)
		fmt.Println("appending...")
	}
	fmt.Println("trying write...")
	writes(dataset, Filecsv)
	fmt.Println("write done!")

}

//decodes retrieved JSON data for each URL
func reader(inRuns int, urls ...string) (Currentdat AutoGenerated) {

	i := 0
	response, err := http.Get(urls[i])
	if err != nil {
		log.Fatalf("failed to get JSON data: %v", err)
	}
	//	defer response.Body.Close()
	dec := json.NewDecoder(response.Body)
	dec.UseNumber()
	Currentdat = AutoGenerated{}
	err = dec.Decode(&Currentdat)
	if err != nil {
		log.Fatalf("Failed to decode the JSON body: %v", err)
	}
	noter := string("looks good")
	fmt.Println(noter, i)
	i += 1

	return Currentdat

}
*/
}
# DATA2000
# DATA2000
